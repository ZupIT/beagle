/*
 * Copyright 2020 ZUP IT SERVICOS EM TECNOLOGIA E INOVACAO SA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'shot'

ext {
    localProp = new Properties()
    fileName = 'local.properties'
    if (project.rootProject.file(fileName).exists()) {
        localProp.load(new FileInputStream(rootProject.file(fileName)))
    }
    screenShotsRecordedBaseDir =
            System.env.VDTESTING_DOWNLOADED_FILES_DIR != null ?
                    "${System.env.VDTESTING_DOWNLOADED_FILES_DIR}" :
                    getArgument("screenShotsRecordedBaseDir", "${project.buildDir}/reports/shot/record/images/recorded")
    screenShotsVerificationBaseDir =
            System.env.SCREENSHOTS_VERIFICATION_BASE_DIR != null ?
                    System.env.SCREENSHOTS_VERIFICATION_BASE_DIR :
                    getArgument("screenShotsVerificationBaseDir", "${projectDir}/screenshots/screenshots-default")
}

shot {
    appId = 'br.com.zup.beagle.sample'
    runInstrumentation = Boolean.valueOf(getArgument("runInstrumentation", "true"))
}

project.afterEvaluate {

    task copyVerificationFiles() {
        fileTree(dir: "${screenShotsRecordedBaseDir}")
                .filter { f ->
                    f.name.contains("_screenshots-default_")
                }.each { foundFile ->
            def nameWithoutPrefix = foundFile.name.split("_screenshots-default_")[1]

            copy {
                from "${foundFile.path}"
                into "${screenShotsVerificationBaseDir}"
                rename { String fileName ->
                    fileName.replace(foundFile.name, nameWithoutPrefix)
                }
            }
        }
    }

    project.tasks.connectedDebugAndroidTest.finalizedBy project.tasks.executeScreenshotTests
}

private def getArgument(prop, defaultValue) {
    def r = project.hasProperty(prop) ? project.getProperties().get(prop) : defaultValue
    return r
}


