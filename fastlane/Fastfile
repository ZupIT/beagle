###
###  Workflow
###
platform :workflow do
  desc "Open PR from patch"
  lane :openPRFromPatch do
    tagName = ENV["TAG_NAME"]
    if !tagName.index("-")
      puts "This release is not a hotfix."
      puts "Exiting..."
      next
    end
    branchName = tagName.split("/").last
    sh("git checkout -b hotfix/" + branchName)
    push_to_git_remote(
      tags: false,
      set_upstream: true
    )
    create_pull_request(
      api_token:ENV["REPO_TOKEN"],
      repo:ENV["REPO"],
      title:"fix: Merge #{branchName} patch with master",
      body: "Auto generated PR to merge fixes from #{branchName} into master."
      )
  end
end

###
###  Flutter
###

platform :flutter do

  desc "Pull Request verification"
  lane :pull_request_verification do
    sh "cd .. && fastlane/flutter/tests.sh"
    run_codecov(platform: 'flutter')
    sh "cd .. && flutter analyze > flutter_analyze_report.txt || true"
  end

end

###
###  Android
###

platform :android do
  desc "Pull Request verification"
  lane :pull_request_verification do
    gradle(project_dir: "android", task: "clean detekt lintDebug jacocoTestReport")
    gradle(project_dir: "android", task: "sample:assembleDebug sample:assembleDebugAndroidTest")
    run_codecov(platform: 'android')
  end

  desc "Deploy current code to stage"
  lane :deploy_to_stage do
    gradle(project_dir: "android", task: "assemble")
    gradle(project_dir: "android", task: "uploadArchives --no-daemon --no-parallel")
  end

  desc "Deploy current code to production"
  lane :deploy_to_production do
    sh "bash ./release/maven_signing.sh"
    deploy_to_stage
    gradle(project_dir: "android", task: "closeAndReleaseRepository")
  end
end

###
###  iOS - Begin
###

platform :ios do
  desc "Pull Request verification"
  lane :pull_request_verification do
    xcversion(version: "~> 11.5.0")
    # TODO: see if it's ok to remove this SwiftLint, since we already have it inside xcode and danger
    swiftlint(
      mode: :lint, # :lint (default) or :autocorrect
      ignore_exit_status: true # Allow fastlane to continue even if SwiftLint returns a non-zero exit status
    )
    scan(
      workspace: "iOS/Beagle.xcworkspace/",
      scheme: "All",
      device: "iPhone 11",
    )
    run_codecov(platform: 'ios')
    check_if_beagle_works_via_cocoapods_integration
  end

  desc "Check wether Beagle is working via CocoaPods in an Example Project"
  private_lane :check_if_beagle_works_via_cocoapods_integration do
    xcversion(version: "~> 11.5.0")
    cocoapods(
      clean_install: true,
      podfile: "iOS/Example/CocoaPodsTest/Podfile"
    )
    scan(
      workspace: "iOS/Example/CocoaPodsTest/CocoaPodsTest.xcworkspace",
      scheme: "CocoaPodsTest",
      device: "iPhone 11"
    )
  end

  desc "Release Pods"
  lane :release_pods do |options|
    version = options[:version] # 1.0.0
    tag = options[:tag] # 1.0.0[-iOS]

    [
      { path: "BeagleSchema.podspec" }, 
      { path: "Beagle.podspec", depends_on_other_beagle_pod: true }
    ]
    .each do |pod|
      update_podspec(path: pod[:path], version: version, tag: tag)

      pod_push(path: pod[:path], allow_warnings: true, synchronous: pod[:depends_on_other_beagle_pod])
    end
  end
end

def update_podspec(path:, version:, tag:)
  rootPath = "../" + path
  file = File.read(rootPath)

  version_regex = /\.version = (.*)\n/
  tag_regex = /tag = (.*)\n/
  
  has_version_and_tag = version_regex.match(file) && tag_regex.match(file) 
  if not has_version_and_tag 
    UI.user_error!("podspec at #{path} should have version and tag")
  end

  new_content = file
    .gsub(version_regex, ".version = '#{version}'\n")
    .gsub(tag_regex, "tag = '#{tag}'\n")

  File.write(rootPath, new_content)
end

###
### iOS - END 
###

desc "Publish new release based on last two tags"
lane :deploy do
  sh "git fetch"

  tagName = ENV["TAG_NAME"].split("/").last
  isHotFix = tagName.index("-")

  if isHotFix
    branchName = "release/" + tagName
    (versionNumber, platformHotfix) = tagName.split("-")
  else
    versionNumber = last_git_tag(pattern: "*[0-9]")
    branchName = "master"
  end

  ENV["VERSION_DEPLOY"] = versionNumber

  sh "git checkout #{branchName}"

  if platformHotfix == "iOS"
    puts "iOS Hotfix release"
    sh "fastlane ios release_pods version:#{versionNumber} tag:#{tagName}"
  elsif platformHotfix == "android"
    puts "Android Hotfix release"
    sh "fastlane android deploy_to_production"
  elsif platformHotfix == "backend"
    puts "Backend Hotfix release"
    sh "fastlane backend deploy_to_production"
  else
    puts "Normal Release"
    sh "fastlane android deploy_to_production"
    sh "fastlane backend deploy_to_production"
    sh "fastlane ios release_pods version:#{versionNumber} tag:#{tagName}"
  end

  releaseNotes = release_notes(versionDeploy: tagName)
  sh "bash ./delete_release.sh " + tagName
  set_github_release(
    repository_name: ENV["REPO"],
    api_token: ENV["REPO_TOKEN"],
    name: tagName,
    tag_name: tagName,
    description: releaseNotes,
    commitish: branchName
  )
end

lane :run_danger do |options|
  danger_id = options[:danger_id] || lane_context[SharedValues::PLATFORM_NAME].to_s
  danger_file_path = options[:danger_file_path] || lane_context[SharedValues::PLATFORM_NAME].to_s
  danger(
    danger_id: danger_id,
    dangerfile: "danger/#{danger_file_path}/Dangerfile",
    github_api_token: ENV["GITHUB_TOKEN"],
    verbose: true,
  )
end

###
###  Backend
###

platform :backend do
  desc "Pull Request verification"
  lane :pull_request_verification do
    gradle(project_dir: "backend", task: "detekt")
    gradle(project_dir: "backend", tasks:["clean", "assemble", "jacocoTestReport"])
    run_codecov(platform: 'backend')
  end

  desc "Sync Spring BFF sample to Micronaut BFF sample"
  lane :sync_to_micronaut do
    sh "./sync-to-micronaut.sh"
    sh "./git_commit.sh 'Synced Spring BFF sample to Micronaut BFF sample.' '../backend/sample/micronaut'"
    push_to_git_remote
  end

  desc "Sync Micronaut BFF sample to Spring BFF sample"
  lane :sync_to_spring do
    sh "./sync-to-spring.sh"
    sh "./git_commit.sh 'Synced Micronaut BFF sample to Spring BFF sample.' '../backend/sample/spring'"
    push_to_git_remote
  end

  desc "Deploy current code to stage"
  lane :deploy_to_stage do
    gradle(project_dir: "backend", task: "assemble")
    gradle(project_dir: "backend", task: "uploadArchives --no-daemon --no-parallel")
  end

  desc "Deploy current code to production"
  lane :deploy_to_production do
    sh "bash ./release/maven_signing.sh"
    deploy_to_stage
    gradle(project_dir: "backend", task: "closeAndReleaseRepository")
  end
end

###
###  Automated tests
###

platform :automated_tests do
  desc "Run iOS automated tests"
  lane :run_ios_automation do
    xcversion(version: "~> 12.0.0")
    #TODO pass bff url to test
    scan(
      workspace: "iOS/Beagle.xcworkspace/",
      scheme: "AutomatedTestsUITests",
      device: "iPhone 11",
    )
  end

  desc "Cleanup"
  lane :cleanup do
    sh("curl -XPOST localhost:8080/actuator/shutdown")
  end
end

desc "Generate release notes"
private_lane :release_notes do |params|
  get_previous_tag = lastExpectedVersion(newVersion:params[:versionDeploy])
  tagHashes = sh "git show-ref -s #{get_previous_tag}"

  lane_context[SharedValues::RELEASE_ANALYZED] = true
  lane_context[SharedValues::RELEASE_LAST_TAG_HASH] = tagHashes.split("\n").last
  lane_context[SharedValues::RELEASE_NEXT_VERSION] = params[:versionDeploy]
  lane_context[SharedValues::CONVENTIONAL_CHANGELOG_ACTION_FORMAT_PATTERN] = "(feat|fix|refactor|perf|chore|test|docs|no_type|ci)(:)()(.*)"
  sections = {
    feat: "Features",
    fix: "Bug fixes",
    refactor: "Code refactoring",
    perf: "Performance improvements",
    chore: "Building system",
    test: "Testing",
    docs: "Documentation",
    ci: "CI/CD",
    no_type: "Other work"
  }
  order = ["feat", "fix", "refactor", "perf", "chore", "test", "docs", "ci", "no_type"]
  changelog = conventional_changelog(sections: sections, order: order, display_title: false, display_links: false)
  changelog = changelog.gsub("**::**  ", "")
  "\nRelease notes #{params[:versionDeploy]}
   \nChanges:
   \n#{changelog}"
end

private_lane :run_codecov do |options|
  codecov = ENV["CODECOV_TOKEN"]
  if !(codecov.nil? || codecov.empty?)
    commit_hash = last_git_commit[:commit_hash]
    codecov_reporter(token: codecov, flags: "-F #{options[:platform]} -C #{commit_hash}")
  end
end

private_lane :danger_token_available? do
  danger = ENV["GITHUB_TOKEN"]
  !(danger.nil? || danger.empty?)
end

after_all do |lane, options|
  if lane == :pull_request_verification
    if danger_token_available?
      run_danger
    end
  end
end

error do |lane, exception, options|
  if lane == :pull_request_verification
    if danger_token_available?
      run_danger
    end
  end
end

lane :lastExpectedVersion do |params|
  platform = params[:newVersion].split("-")
  releaseNumberArray = platform.first.split(".")
  lastVersion = ""
  calculated = false
  for number in releaseNumberArray.reverse()
    intNumber = number.to_i
    if intNumber != 0 && !calculated
      intNumber -= 1
      calculated = true
    end
    lastVersion = ".#{intNumber}" + lastVersion
  end
  lastVersion[0] = ""

  version = ""
  if platform.length > 1 &&
    lastVersion.split(".").last != "0"
      version = "#{lastVersion}-#{platform[1]}"
  else
    version = lastVersion
  end
  "#{version}"
end
