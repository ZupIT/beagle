###
###  Workflow
###
platform :workflow do
  desc "Open PR from patch"
  lane :openPRFromPatch do
    tagName = ENV["TAG_NAME"]
    if !tagName.index("-")
      puts "This release is not a hotfix."
      puts "Exiting..."
      next
    end
    branchName = tagName.split("/").last
    sh("git checkout -b hotfix/" + branchName)
    push_to_git_remote(
      tags: false,
      set_upstream: true
    )
    create_pull_request(
      api_token:ENV["REPO_TOKEN"],
      repo:ENV["REPO"],
      title:"fix: Merge #{branchName} patch with master",
      body: "Auto generated PR to merge fixes from #{branchName} into master."
      )
  end
end

###
###  Android
###

platform :android do

  desc "Pull Request verification"
  lane :pull_request_verification do
    gradle(project_dir: "android", task: "detekt lintDebug jacocoTestReport")
    gradle(project_dir: "android", task: "sample:assembleDebug sample:assembleDebugAndroidTest")
    run_codecov(platform: 'android')
  end

  desc "Deploy current code to stage"
  lane :deploy_to_stage do
    gradle(project_dir: "android", task: "assemble")
    gradle(project_dir: "android", task: "uploadArchives --no-daemon --no-parallel")
  end

  desc "Deploy current code to production"
  lane :deploy_to_production do
    sh "bash ./release/maven_signing.sh"
    deploy_to_stage
    gradle(project_dir: "android", task: "closeAndReleaseRepository")
  end

end

###
###  iOS
###

platform :ios do

  desc "Pull Request verification"
  lane :pull_request_verification do
    xcversion(version: "~> 11.5.0")
    iOSSwiftLint
    scan(
      workspace: "iOS/Beagle.xcworkspace/",
      scheme: "All",
      device: "iPhone 11"
    )
    run_codecov(platform: 'ios')
    iOSCocoaPodsIntegration
  end

  desc "Run iOS SwiftLint"
  private_lane :iOSSwiftLint do
    swiftlint(
    mode: :lint,      # SwiftLint mode: :lint (default) or :autocorrect
    ignore_exit_status: true    # Allow fastlane to continue even if SwiftLint returns a non-zero exit status
  )
  end

  desc "CocoaPods Integration test"
  private_lane :iOSCocoaPodsIntegration do 
    xcversion(version: "~> 11.5.0")
    installCocoaPods
    scan(
      workspace: "iOS/Example/CocoaPodsTest/CocoaPodsTest.xcworkspace",
      scheme: "CocoaPodsTest",
      device: "iPhone 11"
    )
  end


  desc "Install CocoaPods"
  private_lane :installCocoaPods do
    cocoapods(
      clean_install: true,
      podfile: "iOS/Example/CocoaPodsTest/Podfile"
    )
  end

  desc "Updates versions on Podspec"
  lane :release do
    version_bump_podspec(path: "Beagle.podspec", version_number: last_git_tag)
    version_bump_podspec(path: "BeagleSchema.podspec", version_number: last_git_tag)
    pod_push(path: "BeagleSchema.podspec", allow_warnings: true)
    pod_push(path: "Beagle.podspec", allow_warnings: true, synchronous: true)
  end

end

desc "Publish new release based on last two tags"
lane :deploy do
  sh "git fetch"
  branchName = "master"
  isHotFix = ENV["TAG_NAME"].index("-")
  if isHotFix
    branchName = "release/" + ENV["TAG_NAME"].split("/").last
    versionSplit = branchName.split("-")
    platformHotfix = versionSplit.last
    versionNumber = versionSplit.first.sub("-", "")
  else
    versionNumber = last_git_tag(pattern: "*[0-9]")
  end
  sh "git checkout #{branchName}"

  ENV["VERSION_DEPLOY"] = versionNumber
  if platformHotfix == "iOS"
    puts "iOS Hotfix release"
    sh "fastlane ios release"
  elsif platformHotfix == "android"
    puts "Android Hotfix release"
    sh "fastlane android deploy_to_production"
  elsif platformHotfix == "backend"
    puts "Backend Hotfix release"
    sh "fastlane backend deploy_to_production"
  else
    puts "Normal Release"
    sh "fastlane android deploy_to_production"
    sh "fastlane backend deploy_to_production"
    sh "fastlane ios release"
  end

  releaseNotes = release_notes
  sh "bash ./delete_release.sh"
  set_github_release(
    repository_name: ENV["REPO"],
    api_token: ENV["REPO_TOKEN"],
    name: ENV["VERSION_DEPLOY"],
    tag_name: ENV["VERSION_DEPLOY"],
    description: releaseNotes,
    commitish: branchName
  )
  
  if isHotFix
     sh "fastlane workflow openPRFromPatch"
  end
end

lane :run_danger do |options|
   danger_id = options[:danger_id] || lane_context[SharedValues::PLATFORM_NAME].to_s
   danger_file_path = options[:danger_file_path] || lane_context[SharedValues::PLATFORM_NAME].to_s
   danger(
     danger_id: danger_id,
     dangerfile: "danger/#{danger_file_path}/Dangerfile",
     github_api_token: ENV["GITHUB_TOKEN"],
     verbose: true
    )
end

###
###  Backend
###

platform :backend do

  desc "Pull Request verification"
  lane :pull_request_verification do
    gradle(project_dir: "backend", task: "detekt")
    gradle(project_dir: "backend", tasks:
        [
          "assemble",
          "jacocoTestReport",
        ]
    )
    run_codecov(platform: 'backend')
  end

  desc "Sync Spring BFF sample to Micronaut BFF sample"
  lane :sync_to_micronaut do
    sh "./sync-to-micronaut.sh"
    sh "./git_commit.sh 'Synced Spring BFF sample to Micronaut BFF sample.' '../backend/sample/micronaut'"
    push_to_git_remote
  end

  desc "Sync Micronaut BFF sample to Spring BFF sample"
  lane :sync_to_spring do
    sh "./sync-to-spring.sh"
    sh "./git_commit.sh 'Synced Micronaut BFF sample to Spring BFF sample.' '../backend/sample/spring'"
    push_to_git_remote
  end

  desc "Deploy current code to stage"
  lane :deploy_to_stage do
    gradle(project_dir: "backend", task: "assemble")
    gradle(project_dir: "backend", task: "uploadArchives --no-daemon --no-parallel")
  end

  desc "Deploy current code to production"
  lane :deploy_to_production do
    sh "bash ./release/maven_signing.sh"
    deploy_to_stage
    gradle(project_dir: "backend", task: "closeAndReleaseRepository")
  end

end

desc "Generate release notes"
private_lane :release_notes do
  get_previous_tag = lastExpectedVersion(newVersion:ENV["VERSION_DEPLOY"])
  tagHashes = sh "git show-ref -s #{get_previous_tag}"

  lane_context[SharedValues::RELEASE_ANALYZED] = true
  lane_context[SharedValues::RELEASE_LAST_TAG_HASH] = tagHashes.split("\n").last
  lane_context[SharedValues::RELEASE_NEXT_VERSION] = ENV["TAG_NAME"]
  lane_context[SharedValues::CONVENTIONAL_CHANGELOG_ACTION_FORMAT_PATTERN] = "(feat|fix|refactor|perf|chore|test|docs|no_type)(:)()(.*)"
  changelog = conventional_changelog(display_title: false, display_links: false)
  changelog = changelog.gsub("**::**  ", "")
  "\nRelease notes #{ ENV["VERSION_DEPLOY"] }
   \nChanges:
   \n#{changelog}"
end

private_lane :run_codecov do |options|
  codecov = ENV["CODECOV_TOKEN"]
  if !(codecov.nil? || codecov.empty?)
     commit_hash = last_git_commit[:commit_hash]
     codecov_reporter(token: codecov, flags: "-F #{options[:platform]} -C #{commit_hash}")
  end
end

private_lane :danger_token_available? do
  danger = ENV["GITHUB_TOKEN"]
  !(danger.nil? || danger.empty?)
end

after_all do |lane, options|
   if lane == :pull_request_verification
       if danger_token_available?
         run_danger
       end
    end
end

error do |lane, exception, options|
  if lane == :pull_request_verification
     if danger_token_available?
       run_danger
     end
  end
end

lane :lastExpectedVersion do |params|
  platform = params[:newVersion].split("-")
  releaseNumberArray = platform.first.split(".")
  lastVersion = ""
  calculated = false
  for number in releaseNumberArray.reverse()
    intNumber = number.to_i
    if intNumber != 0 && !calculated
      intNumber -= 1
      calculated = true
    end
    lastVersion = ".#{intNumber}" + lastVersion
  end
  lastVersion[0] = ""

  version = ""
  if platform.length > 1
    version = "#{lastVersion}-#{platform[1]}"
  else
    version = lastVersion
  end
  "#{version}"
end