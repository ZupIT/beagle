// THIS IS A GENERATED FILE. DO NOT EDIT THIS
/*
 * Copyright 2020 ZUP IT SERVICOS EM TECNOLOGIA E INOVACAO SA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
<%
  require_relative './Synthax/Types/enum_type'
  require_relative './Synthax/Attributes/list'
  @tab = "    "
  @doubleTab = @tab + @tab

  def handleTypeName(variable)
      output = variable.isBindable ? "Expression<#{variable.typeName}>" : variable.typeName
      output = variable.class == List ? "[#{output}]" : output
      output = variable.isOptional ? output + "?" : output
      output
  end

  def handleTypeNameForInitMethod(variable, shouldAddComma = false)
    output = variable.isBindable ? "Expression<#{variable.typeName}>" : variable.typeName
    output = variable.class == List ? "[#{output}]" : output
    output = variable.isOptional ? output + "?" : output

    if variable.isOptional && variable.defaultValue == ''
      output += " = nil"
    elsif variable.defaultValue != ''
      output += " #{variable.defaultValue}"
    end
    
    output = shouldAddComma ? output + ",\n" : output
    output
  end

  def handleInheritance(synthaxType)
    output = synthaxType.inheritFrom.size == 0 ? "" : ": "
    counter = 0
    for type in synthaxType.inheritFrom
      output += type
      output = synthaxType.inheritFrom.size - 1 != counter ? output + ", " : output
      counter += 1
    end

    output
  end

  def isEnum(objectType)
    objectType.synthaxType.class == EnumType
  end

  def casesForEnum(objectType)
    output = ""
    for variable in objectType.synthaxType.variables
      output += "#{@tab}case #{variable.name}"
      if variable.defaultValue != ''
         output = objectType.synthaxType.inheritFrom.include?("String") ?
         output + " = \"#{variable.defaultValue}\"" :
         output + " = #{variable.defaultValue}" 
      end
      output += "\n"
    end
    output
  end

  def declareProperitesForCommonObject(objectType)
    output = ""
    for variable in objectType.synthaxType.variables
      output += "#{@tab}#{variable.accessor} let #{variable.name}: #{handleTypeName(variable)}\n"
    end
    output
  end

  def initForCommomObject(objectType)
    output = "#{@tab}#{objectType.synthaxType.accessor} init(\n"
    counter = 0
    for variable in objectType.synthaxType.variables
      output += "#{@doubleTab}#{variable.name}: #{handleTypeNameForInitMethod(variable, objectType.synthaxType.variables.size - 1 != counter)}"
      counter += 1
    end
    
    output += "\n#{@tab}) {\n"

    for variable in objectType.synthaxType.variables
      output += "#{@doubleTab}self.#{variable.name} = #{variable.name}\n"
    end

    output += "#{@tab}}"

    output
  end

-%>
<% if isEnum(objectType) %>
<%= objectType.synthaxType.accessor %> enum <%= objectType.synthaxType.name -%><%= handleInheritance(objectType.synthaxType) %>, Decodable {
<%= casesForEnum(objectType)-%>
}<%  -%>
<% else %>
<%= objectType.synthaxType.accessor %> struct <%= objectType.synthaxType.name -%><%= handleInheritance(objectType.synthaxType) %> {
  
<%=@tab-%>// MARK: - Public Properties

<%= declareProperitesForCommonObject(objectType)-%>

<%= initForCommomObject(objectType)-%><%-%>
}<%  -%>
<% end %>