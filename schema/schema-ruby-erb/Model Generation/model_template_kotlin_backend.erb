// THIS IS A GENERATED FILE. DO NOT EDIT THIS
/*
 * Copyright 2020 ZUP IT SERVICOS EM TECNOLOGIA E INOVACAO SA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
<%
  def handleTypeName(variable, shouldAddComma = false)
      #todo variables now have default values!
      output = variable.isBindable ? "Bind<" + variable.typeName + ">" : variable.typeName
      output = variable.class == List ? "List<" + output + ">" : output
      output = variable.isOptional ? output + "?" : output
      output = shouldAddComma ? output + "," : output 
      output
  end

  def handleTypeNameForInitMethod(variable, shouldAddComma = false)
    output = variable.class == List ? "List<" + variable.typeName + ">" : variable.typeName
    output = variable.isOptional ? output + "? = null" : output
    output = shouldAddComma ?  output + "," : output
    output
  end

  def handleVariableAssignementInsideConstructor(variable, shouldAddComma = false)
    output = variable.isBindable ? "valueOf(" + variable.name + ")" : variable.name
    output = shouldAddComma ? output + "," : output
    output
  end

  def getImports(variables, importManager)
    variables.map { | variable| importManager[variable.typeName] }.uniq.filter { |import| !import.empty? }
  end
-%>

package <%= objectType.synthaxType.package -%>


<% if objectType.synthaxType.variables.any? { |variable| variable.isBindable }-%>
import br.com.zup.beagle.widget.context.Bind
import br.com.zup.beagle.widget.context.valueOf
import br.com.zup.beagle.widget.context.valueOfNullable
<% end -%>
<% for qualifiedName in getImports(objectType.synthaxType.variables, importManager) -%>
import <%= qualifiedName -%>

<% end -%>

data class <%= objectType.synthaxType.name -%> (<% -%>
<% counter = 0 -%>
<% for variable in objectType.synthaxType.variables %>
  <%= variable.accessor %> override val <%= variable.name %>: <%= handleTypeName(variable, objectType.synthaxType.variables.size - 1 != counter) -%>
  <% counter += 1 -%>
<% end -%> 
) : <%= objectType.synthaxType.name -%>Schema {
  constructor (<% -%>
  <% counter = 0 -%>
  <% for variable in objectType.synthaxType.variables %>
    <%= variable.name %>: <%= handleTypeNameForInitMethod(variable, objectType.synthaxType.variables.size - 1 != counter) -%>
    <% counter += 1 -%>
  <% end %>
  ) : this (<% -%>
  <% counter = 0 -%>
  <% for variable in objectType.synthaxType.variables %>
      <%= handleVariableAssignementInsideConstructor(variable, objectType.synthaxType.variables.size - 1 != counter) -%>
    <% counter += 1 -%>
  <% end %>
  )
}