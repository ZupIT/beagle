// THIS IS A GENERATED FILE. DO NOT EDIT THIS
/*
 * Copyright 2020 ZUP IT SERVICOS EM TECNOLOGIA E INOVACAO SA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
<%
  # TODO: Secondary constructor in Analytics Screen is the same as the primary. It should only be generated if at least one field is bindable.
  require_relative 'template_helper.rb'
  @templateHelper = TemplateHelper.new
  #@templateHelper.defaultDeclarationType = todo add default declaration type
  
  def handleTypeName(variable, importManager)
    #todo variables now have default values!
      output = importManager.has_key?(variable.typeName) ? variable.typeName + "Schema" : variable.typeName
    output = variable.isBindable ? "Bind<#{output}>" : output
    output = variable.class == List ? "List<#{output}>" : output
    output = variable.isOptional ? output + "?" : output
    output
  end

  def getImports(variables, importManager)
    variables.map { | variable| importManager[variable.typeName] }.uniq.filter { |import| !import.empty? }
  end
-%>

package <%= objectType.synthax_type.package -%>


<% if !@templateHelper.is_enum(objectType) -%>
<% if objectType.synthax_type.variables.any? { |variable| variable.isBindable }-%>
import br.com.zup.beagle.widget.context.Bind
<% end -%>
<% for qualifiedName in getImports(objectType.synthax_type.variables, importManager) -%>
import <%= qualifiedName -%>Schema
<% end -%>

<% end -%>

<% if @templateHelper.is_enum(objectType) %>
enum class <%= objectType.synthax_type.name -%>Schema {
  <%= objectType.synthax_type.variables.map { |enumCase| enumCase.defaultValue.upcase }.join(",\n  ") %>
}
<% else %><% -%>
interface <%= objectType.synthax_type.name -%>Schema {<% -%>
<% for variable in objectType.synthax_type.variables %>
  <%= variable.accessor %> val <%= variable.name %>: <%= handleTypeName(variable, importManager) -%>
<% end -%> 
}
<% end %><% -%>