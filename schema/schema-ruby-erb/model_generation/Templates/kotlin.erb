// THIS IS A GENERATED FILE. DO NOT EDIT THIS
/*
 * Copyright 2020 ZUP IT SERVICOS EM TECNOLOGIA E INOVACAO SA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
<%
  require_relative 'Templates/template_helper.rb'

  @templateHelper = TemplateHelper.new
  @templateHelper.languageIdentifier = SupportedLanguages.new.kotlin
  @templateHelper.defaultDeclarationType = BasicTypeKeys.interface
  
  def handleTypeName(variable, import_manager)
    output = @templateHelper.fetch_type(variable.typeName)
    output = import_manager.has_key?(output) ? output + "Schema" : output
    output = variable.isBindable ? "BindAttribute<#{output}>" : output
    output = variable.class == List ? "List<#{output}>" : output
    output = variable.isOptional ? output + "?" : output
    output
  end
-%>

package <%= objectType.synthax_type.package %>

<% if !@templateHelper.is_enum(objectType) -%>
<% if objectType.synthax_type.variables.any? { |variable| variable.isBindable }-%>
import br.com.zup.beagle.core.BindAttribute
<% end -%>
<% for qualifiedName in @templateHelper.getImports(objectType.synthax_type.variables, import_manager) -%>
import <%= qualifiedName %>Schema
<% end -%>
<% for qualifiedName in @templateHelper.getImports(objectType.synthax_type.variables, enum_import_manager) -%>
import <%= qualifiedName %>
<% end -%>
<% end -%>

<% if @templateHelper.is_enum(objectType) %>
enum class <%= objectType.synthax_type.name -%> {
  <%= objectType.synthax_type.variables.map { |enumCase| enumCase.defaultValue.upcase }.join(",\n  ") %>
}
<% else %><% -%>
<%=@templateHelper.fetch_built_in_type_declaration(objectType.synthax_type.type)-%> <%= objectType.synthax_type.name -%>Schema {<% -%>
<% for variable in objectType.synthax_type.variables %>
  <%= variable.accessor %> val <%= variable.name %>: <%= handleTypeName(variable, import_manager) -%>
<% end -%> 
}
<% end %><% -%>