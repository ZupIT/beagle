// THIS IS A GENERATED FILE. DO NOT EDIT THIS
/*
 * Copyright 2020 ZUP IT SERVICOS EM TECNOLOGIA E INOVACAO SA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
<%
  require_relative 'Templates/template_helper.rb'

  @templateHelper = TemplateHelper.new
  @templateHelper.languageIdentifier = SupportedLanguages.new.kotlin
  @templateHelper.defaultDeclarationType = "data class"

  def handleTypeNameAndDefault(variable, shouldAddComma = false)
    default = getVariableDefault(variable)
    output = @templateHelper.fetch_type(variable.typeName)
    output = variable.isBindable ? "Bind<#{output}>" : output
    output = variable.class == List ? "List<#{output}>" : output
    output = variable.isOptional ? output + "?" : output
    output = !default.empty? ? "#{output} = #{default}" : output
    output = shouldAddComma ? output + "," : output
    output
  end

  def handleTypeNameForInitMethod(variable, shouldAddComma = false)
    default = getVariableDefault(variable)
    output = @templateHelper.fetch_type(variable.typeName)
    output = variable.class == List ? "List<#{output}>" : output
    output = variable.isOptional ? output + "?" : output
    output = !default.empty? ? "#{output} = #{default}" : output
    output = shouldAddComma ?  output + "," : output
    output
  end

  def handleVariableAssignementInsideConstructor(variable, shouldAddComma = false)
    bind_helper = variable.isOptional ? "valueOfNullable" : "valueOf"
    output = variable.isBindable ? "#{bind_helper}(#{variable.name})" : variable.name
    output = shouldAddComma ? output + "," : output
    output
  end

  def getVariableDefault(variable)
    variable.defaultValue.empty? && variable.isOptional ? "null" : variable.defaultValue
  end

  def getSuperClasses(type)
    # TODO handle this in general Kotlin when all supertypes are defined with schema
    (type.inheritFrom << "#{type.name}Schema").map { |parent| parent == Widget.new.name ? "#{parent}()" : parent }.join(", ")
  end
-%>

package <%= objectType.synthax_type.package %>

<% if objectType.synthax_type.variables.any? { |variable| variable.isBindable } -%>
import br.com.zup.beagle.widget.context.Bind
import br.com.zup.beagle.widget.context.valueOf
import br.com.zup.beagle.widget.context.valueOfNullable
<% end -%>
<% for qualifiedName in @templateHelper.getImports(objectType.synthax_type.variables, import_manager) -%>
import <%= qualifiedName %>
<% end -%>
<% for qualifiedName in @templateHelper.getImports(objectType.synthax_type.variables, enum_import_manager) -%>
import <%= qualifiedName %>
<% end -%>

data class <%= objectType.synthax_type.name -%> (<% -%>
<% counter = 0 -%>
<% for variable in objectType.synthax_type.variables %>
  <%= variable.accessor %> override val <%= variable.name %>: <%= handleTypeNameAndDefault(variable, objectType.synthax_type.variables.size - 1 != counter) -%>
  <% counter += 1 -%>
<% end -%> 
) : <%= getSuperClasses(objectType.synthax_type) -%> <% if objectType.synthax_type.variables.any?(&:isBindable) -%>{
  constructor (<% -%>
  <% counter = 0 -%>
  <% for variable in objectType.synthax_type.variables %>
    <%= variable.name %>: <%= handleTypeNameForInitMethod(variable, objectType.synthax_type.variables.size - 1 != counter) -%>
    <% counter += 1 -%>
  <% end %>
  ) : this (<% -%>
  <% counter = 0 -%>
  <% for variable in objectType.synthax_type.variables %>
      <%= handleVariableAssignementInsideConstructor(variable, objectType.synthax_type.variables.size - 1 != counter) -%>
    <% counter += 1 -%>
  <% end %>
  )
}<% end -%>
