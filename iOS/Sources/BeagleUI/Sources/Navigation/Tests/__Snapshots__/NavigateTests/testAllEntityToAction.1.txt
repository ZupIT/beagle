openExternalURL-withPath-withData ->
Navigate.openExternalURL(path)

openExternalURL-withPath-withData ->
Navigate.openExternalURL(path)

openExternalURL-withPath-withData ->
Navigate.openExternalURL(path)

openExternalURL-withPath-withData ->
Navigate.openExternalURL(path)

openExternalURL-withPath-noData ->
Navigate.openExternalURL(path)

openExternalURL-withPath-noData ->
Navigate.openExternalURL(path)

openExternalURL-withPath-noData ->
Navigate.openExternalURL(path)

openExternalURL-withPath-noData ->
Navigate.openExternalURL(path)

openExternalURL-noPath-withData ->
ERROR

openExternalURL-noPath-withData ->
ERROR

openExternalURL-noPath-withData ->
ERROR

openExternalURL-noPath-withData ->
ERROR

openExternalURL-noPath-noData ->
ERROR

openExternalURL-noPath-noData ->
ERROR

openExternalURL-noPath-noData ->
ERROR

openExternalURL-noPath-noData ->
ERROR

openNativeRoute-withPath-withData ->
Navigate.openNativeRoute(DeepLinkNavigation(path: "path", data: Optional(["data": ""]), component: nil, shouldResetApplication: true))

openNativeRoute-withPath-withData ->
Navigate.openNativeRoute(DeepLinkNavigation(path: "path", data: Optional(["data": ""]), component: nil, shouldResetApplication: false))

openNativeRoute-withPath-withData ->
Navigate.openNativeRoute(DeepLinkNavigation(path: "path", data: Optional(["data": ""]), component: nil, shouldResetApplication: true))

openNativeRoute-withPath-withData ->
Navigate.openNativeRoute(DeepLinkNavigation(path: "path", data: Optional(["data": ""]), component: nil, shouldResetApplication: false))

openNativeRoute-withPath-noData ->
Navigate.openNativeRoute(DeepLinkNavigation(path: "path", data: nil, component: nil, shouldResetApplication: true))

openNativeRoute-withPath-noData ->
Navigate.openNativeRoute(DeepLinkNavigation(path: "path", data: nil, component: nil, shouldResetApplication: false))

openNativeRoute-withPath-noData ->
Navigate.openNativeRoute(DeepLinkNavigation(path: "path", data: nil, component: nil, shouldResetApplication: true))

openNativeRoute-withPath-noData ->
Navigate.openNativeRoute(DeepLinkNavigation(path: "path", data: nil, component: nil, shouldResetApplication: false))

openNativeRoute-noPath-withData ->
ERROR

openNativeRoute-noPath-withData ->
ERROR

openNativeRoute-noPath-withData ->
ERROR

openNativeRoute-noPath-withData ->
ERROR

openNativeRoute-noPath-noData ->
ERROR

openNativeRoute-noPath-noData ->
ERROR

openNativeRoute-noPath-noData ->
ERROR

openNativeRoute-noPath-noData ->
ERROR

resetApplication-withPath-withData ->
Navigate.resetApplication(remote(BeagleUI.Navigate.NewPath(path: "path", shouldPrefetch: true, fallback: nil))

resetApplication-withPath-withData ->
Navigate.resetApplication(remote(BeagleUI.Navigate.NewPath(path: "path", shouldPrefetch: true, fallback: nil))

resetApplication-withPath-withData ->
Navigate.resetApplication(remote(BeagleUI.Navigate.NewPath(path: "path", shouldPrefetch: false, fallback: nil))

resetApplication-withPath-withData ->
Navigate.resetApplication(remote(BeagleUI.Navigate.NewPath(path: "path", shouldPrefetch: false, fallback: nil))

resetApplication-withPath-noData ->
Navigate.resetApplication(remote(BeagleUI.Navigate.NewPath(path: "path", shouldPrefetch: true, fallback: nil))

resetApplication-withPath-noData ->
Navigate.resetApplication(remote(BeagleUI.Navigate.NewPath(path: "path", shouldPrefetch: true, fallback: nil))

resetApplication-withPath-noData ->
Navigate.resetApplication(remote(BeagleUI.Navigate.NewPath(path: "path", shouldPrefetch: false, fallback: nil))

resetApplication-withPath-noData ->
Navigate.resetApplication(remote(BeagleUI.Navigate.NewPath(path: "path", shouldPrefetch: false, fallback: nil))

resetApplication-noPath-withData ->
ERROR

resetApplication-noPath-withData ->
ERROR

resetApplication-noPath-withData ->
ERROR

resetApplication-noPath-withData ->
ERROR

resetApplication-noPath-noData ->
ERROR

resetApplication-noPath-noData ->
ERROR

resetApplication-noPath-noData ->
ERROR

resetApplication-noPath-noData ->
ERROR

resetStack-withPath-withData ->
Navigate.resetStack(remote(BeagleUI.Navigate.NewPath(path: "path", shouldPrefetch: true, fallback: nil)))

resetStack-withPath-withData ->
Navigate.resetStack(remote(BeagleUI.Navigate.NewPath(path: "path", shouldPrefetch: true, fallback: nil)))

resetStack-withPath-withData ->
Navigate.resetStack(remote(BeagleUI.Navigate.NewPath(path: "path", shouldPrefetch: false, fallback: nil)))

resetStack-withPath-withData ->
Navigate.resetStack(remote(BeagleUI.Navigate.NewPath(path: "path", shouldPrefetch: false, fallback: nil)))

resetStack-withPath-noData ->
Navigate.resetStack(remote(BeagleUI.Navigate.NewPath(path: "path", shouldPrefetch: true, fallback: nil)))

resetStack-withPath-noData ->
Navigate.resetStack(remote(BeagleUI.Navigate.NewPath(path: "path", shouldPrefetch: true, fallback: nil)))

resetStack-withPath-noData ->
Navigate.resetStack(remote(BeagleUI.Navigate.NewPath(path: "path", shouldPrefetch: false, fallback: nil)))

resetStack-withPath-noData ->
Navigate.resetStack(remote(BeagleUI.Navigate.NewPath(path: "path", shouldPrefetch: false, fallback: nil)))

resetStack-noPath-withData ->
ERROR

resetStack-noPath-withData ->
ERROR

resetStack-noPath-withData ->
ERROR

resetStack-noPath-withData ->
ERROR

resetStack-noPath-noData ->
ERROR

resetStack-noPath-noData ->
ERROR

resetStack-noPath-noData ->
ERROR

resetStack-noPath-noData ->
ERROR

pushStack-withPath-withData ->
Navigate.pushStack(remote(BeagleUI.Navigate.NewPath(path: "path", shouldPrefetch: true, fallback: nil)))

pushStack-withPath-withData ->
Navigate.pushStack(remote(BeagleUI.Navigate.NewPath(path: "path", shouldPrefetch: true, fallback: nil)))

pushStack-withPath-withData ->
Navigate.pushStack(remote(BeagleUI.Navigate.NewPath(path: "path", shouldPrefetch: false, fallback: nil)))

pushStack-withPath-withData ->
Navigate.pushStack(remote(BeagleUI.Navigate.NewPath(path: "path", shouldPrefetch: false, fallback: nil)))

pushStack-withPath-noData ->
Navigate.pushStack(remote(BeagleUI.Navigate.NewPath(path: "path", shouldPrefetch: true, fallback: nil)))

pushStack-withPath-noData ->
Navigate.pushStack(remote(BeagleUI.Navigate.NewPath(path: "path", shouldPrefetch: true, fallback: nil)))

pushStack-withPath-noData ->
Navigate.pushStack(remote(BeagleUI.Navigate.NewPath(path: "path", shouldPrefetch: false, fallback: nil)))

pushStack-withPath-noData ->
Navigate.pushStack(remote(BeagleUI.Navigate.NewPath(path: "path", shouldPrefetch: false, fallback: nil)))

pushStack-noPath-withData ->
ERROR

pushStack-noPath-withData ->
ERROR

pushStack-noPath-withData ->
ERROR

pushStack-noPath-withData ->
ERROR

pushStack-noPath-noData ->
ERROR

pushStack-noPath-noData ->
ERROR

pushStack-noPath-noData ->
ERROR

pushStack-noPath-noData ->
ERROR

popStack-withPath-withData ->
Navigate.popStack

popStack-withPath-withData ->
Navigate.popStack

popStack-withPath-withData ->
Navigate.popStack

popStack-withPath-withData ->
Navigate.popStack

popStack-withPath-noData ->
Navigate.popStack

popStack-withPath-noData ->
Navigate.popStack

popStack-withPath-noData ->
Navigate.popStack

popStack-withPath-noData ->
Navigate.popStack

popStack-noPath-withData ->
Navigate.popStack

popStack-noPath-withData ->
Navigate.popStack

popStack-noPath-withData ->
Navigate.popStack

popStack-noPath-withData ->
Navigate.popStack

popStack-noPath-noData ->
Navigate.popStack

popStack-noPath-noData ->
Navigate.popStack

popStack-noPath-noData ->
Navigate.popStack

popStack-noPath-noData ->
Navigate.popStack

pushView-withPath-withData ->
Navigate.pushView(remote(BeagleUI.Navigate.NewPath(path: "path", shouldPrefetch: true, fallback: nil)))

pushView-withPath-withData ->
Navigate.pushView(remote(BeagleUI.Navigate.NewPath(path: "path", shouldPrefetch: true, fallback: nil)))

pushView-withPath-withData ->
Navigate.pushView(remote(BeagleUI.Navigate.NewPath(path: "path", shouldPrefetch: false, fallback: nil)))

pushView-withPath-withData ->
Navigate.pushView(remote(BeagleUI.Navigate.NewPath(path: "path", shouldPrefetch: false, fallback: nil)))

pushView-withPath-noData ->
Navigate.pushView(remote(BeagleUI.Navigate.NewPath(path: "path", shouldPrefetch: true, fallback: nil)))

pushView-withPath-noData ->
Navigate.pushView(remote(BeagleUI.Navigate.NewPath(path: "path", shouldPrefetch: true, fallback: nil)))

pushView-withPath-noData ->
Navigate.pushView(remote(BeagleUI.Navigate.NewPath(path: "path", shouldPrefetch: false, fallback: nil)))

pushView-withPath-noData ->
Navigate.pushView(remote(BeagleUI.Navigate.NewPath(path: "path", shouldPrefetch: false, fallback: nil)))

pushView-noPath-withData ->
ERROR

pushView-noPath-withData ->
ERROR

pushView-noPath-withData ->
ERROR

pushView-noPath-withData ->
ERROR

pushView-noPath-noData ->
ERROR

pushView-noPath-noData ->
ERROR

pushView-noPath-noData ->
ERROR

pushView-noPath-noData ->
ERROR

popView-withPath-withData ->
Navigate.popView

popView-withPath-withData ->
Navigate.popView

popView-withPath-withData ->
Navigate.popView

popView-withPath-withData ->
Navigate.popView

popView-withPath-noData ->
Navigate.popView

popView-withPath-noData ->
Navigate.popView

popView-withPath-noData ->
Navigate.popView

popView-withPath-noData ->
Navigate.popView

popView-noPath-withData ->
Navigate.popView

popView-noPath-withData ->
Navigate.popView

popView-noPath-withData ->
Navigate.popView

popView-noPath-withData ->
Navigate.popView

popView-noPath-noData ->
Navigate.popView

popView-noPath-noData ->
Navigate.popView

popView-noPath-noData ->
Navigate.popView

popView-noPath-noData ->
Navigate.popView

popToView-withPath-withData ->
Navigate.popToView(path)

popToView-withPath-withData ->
Navigate.popToView(path)

popToView-withPath-withData ->
Navigate.popToView(path)

popToView-withPath-withData ->
Navigate.popToView(path)

popToView-withPath-noData ->
Navigate.popToView(path)

popToView-withPath-noData ->
Navigate.popToView(path)

popToView-withPath-noData ->
Navigate.popToView(path)

popToView-withPath-noData ->
Navigate.popToView(path)

popToView-noPath-withData ->
ERROR

popToView-noPath-withData ->
ERROR

popToView-noPath-withData ->
ERROR

popToView-noPath-withData ->
ERROR

popToView-noPath-noData ->
ERROR

popToView-noPath-noData ->
ERROR

popToView-noPath-noData ->
ERROR

popToView-noPath-noData ->
ERROR

