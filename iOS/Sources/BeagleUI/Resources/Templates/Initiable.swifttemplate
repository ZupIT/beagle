<%
func variableNameAndType(_ variable: Variable, _ isFirstTime: Bool) -> String {
    let first = isFirstTime ? "\n\t\t" : ",\n\t\t"
    let nameAndType = "\(variable.name): \(variable.unwrappedTypeName)"
    return first + nameAndType
}

func variableOptionalAndValue(_ variable: Variable, isLastTime: Bool) -> String {
    var last = isLastTime ? "" : ""
    if variable.isOptional {
        return "? = nil" + last
    } else if variable.unwrappedTypeName == "WidgetProperties" {
        return " = WidgetProperties()" + last
    } else {
        return "" + last
    }
}
-%>
<% for type in types.all
    where (type.implements["AutoInitiable"] != nil) { -%>
// sourcery:inline:auto:<%= type.name %>.Init
    <%_ var firstTime: Bool = true -%>
    <%_ var lastTime: Bool = false -%>
<%= "\t" + type.accessLevel -%> init(<% for i in 0 ..< type.instanceVariables.count { -%> <% let variable = type.instanceVariables[i] -%>
        <%_= variableNameAndType(variable, firstTime) -%> <%_= variableOptionalAndValue(variable, isLastTime: (i == type.instanceVariables.count - 1)) -%>
         <%_ firstTime = false -%>
    <%_ } %>
    ) {
        <%_ for variable in type.instanceVariables { -%>
        self.<%= variable.name %> = <%= variable.name %>
        <%_ } -%>
    }
// sourcery:end

<%_ } %>
