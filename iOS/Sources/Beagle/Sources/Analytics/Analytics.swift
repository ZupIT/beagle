/*
 * Copyright 2020 ZUP IT SERVICOS EM TECNOLOGIA E INOVACAO SA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// MARK: - Dependency

public protocol DependencyAnalyticsExecutor {

    /// Set this property to receive analytics info when Beagle actions occur
    var analyticsProvider: AnalyticsProvider? { get }

    /// DEPRECATED
    var analytics: Analytics? { get }
}

// MARK: - Provider

public protocol AnalyticsProvider {

    /// Returns the configuration for the analytics. In general, this configuration will be made
    /// available by the backend. So, this function would make an HTTP request,
    /// parse the result and return it.
    ///
    /// You can however, also use it as a configuratoin stored locally.
    func getConfig() -> AnalyticsConfig?

    /// This function will be called every time Beagle needs to create a record. If you don't want
    /// to send one request for each analytics generated by Beagle, it is a good idea to implement a
    /// batch mechanism within this function.
    func createRecord(_ record: AnalyticsRecord)

    /// Represents how many records will be queued (temporarily stored) while `getConfig()` is not set.
    /// When `nil`, the maximum number of items in the queue will be `100`.
    var maximumItemsInQueue: Int? { get }
}
