/*
 * Copyright 2020 ZUP IT SERVICOS EM TECNOLOGIA E INOVACAO SA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import Foundation

public struct AnalyticsConfig {

    /// Default is true, when false no analytics will be generated by this system when a screen is loaded.
    public var enableScreenAnalytics: Bool = true
    
    /// A map of actions allowed to create analytics records. By default no action creates records.
    ///
    /// In this dictionary, each _key_ is the name of a `_beagleAction_`, and _values_ are name of properties we want to retrieve from the action to compose the analytics record.
    /// If we want to send for instance, the `url` and `method` of every `"beagle:sendRequest"`, we must create the entry:
    /// `["beagle:sendRequest": ["url", "method"]]`.
    public var actions = AttributesByActionName()

    public typealias AttributesByActionName = [ActionName: [String]]
    public typealias ActionName = String

    public init(
        enableScreenAnalytics: Bool = true,
        actions: AttributesByActionName = AttributesByActionName()
    ) {
        self.enableScreenAnalytics = enableScreenAnalytics
        self.actions = actions.mapKeysToLowercased()
    }
}

// MARK: Extensions

extension AnalyticsConfig: Codable {

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        enableScreenAnalytics = try container.decodeIfPresent(Bool.self, forKey: .enableScreenAnalytics) ?? true
        actions = try container.decodeIfPresent(AttributesByActionName.self, forKey: .actions) ?? AttributesByActionName()
        actions = actions.mapKeysToLowercased()
    }

    enum CodingKeys: String, CodingKey {
        case enableScreenAnalytics
        case actions
    }
}

extension AnalyticsConfig.AttributesByActionName {

    func mapKeysToLowercased() -> Self {
        Self(uniqueKeysWithValues: self.map {
            ($0.key.lowercased(), $0.value)
        })
    }
}

extension AnalyticsConfig.ActionName {

    public static func beagleActionName(_ action: Action.Type) -> String {
        let isNavigate = action is Navigate.Type
        assert(!isNavigate, "This function can't be used for Navigate actions, since they are enums")

        let name = dependencies.decoder.nameForAction(ofType: action) ?? ""

        assert(!name.isEmpty, "Error when using Action that was not registered")
        return name
    }
}
