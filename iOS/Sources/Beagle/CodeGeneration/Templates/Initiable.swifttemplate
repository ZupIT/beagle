<%
/*
* Copyright 2020 ZUP IT SERVICOS EM TECNOLOGIA E INOVACAO SA
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
%>
<%
func variableNameAndType(_ variable: Variable, _ isFirstTime: Bool, _ classType: Type?) -> String {
    let identation = "\n        "
    var first = isFirstTime ? identation : ",\(identation)"
    
    let nameAndType = "\(variable.name): \(variable.unwrappedTypeName)"
    return first + nameAndType
}

func variableOptionalAndValue(_ variable: Variable, _ classType: Type?) -> String {
    if let defaultValue = variable.defaultValue {
        let string = variable.isOptional ? "? = " : " = "
        return string + defaultValue
    } else if variable.isOptional {
        return "? = nil"
    } else if variable.unwrappedTypeName == "WidgetProperties" {
        return " = WidgetProperties()"
    } else {
        return ""
    }
}
-%>
<% for type in types.all
    where (type.implements["AutoInitiable"] != nil || type.implements["AutoInitiableAndDecodable"] != nil) {
-%>
// sourcery:inline:auto:<%= type.name %>.Init
    <%_ var firstTime: Bool = true -%>
    <%= type.accessLevel -%> init(<% for i in 0 ..< type.instanceVariables.count { -%> <%_ let variable = type.instanceVariables[i] -%>
        <%_= variableNameAndType(variable, firstTime, type) -%> <%_= variableOptionalAndValue(variable, type)-%>
        <%_ firstTime = false -%>
    <%_ } %>
    ) {
        <%_ for variable in type.instanceVariables { -%>
        self.<%= variable.name %> = <%= variable.name %>
        <%_ } -%>
    }
// sourcery:end

<%_ } %>
