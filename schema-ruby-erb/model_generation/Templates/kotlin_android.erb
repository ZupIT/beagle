/*
 * Copyright 2020 ZUP IT SERVICOS EM TECNOLOGIA E INOVACAO SA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
<%
  require_relative 'Templates/template_helper.rb'
  require_relative 'Templates/kotlin_template_helper.rb'

  @tab = "    "
  @helper.languageIdentifier = SupportedLanguages.new.kotlin
  @helper.defaultDeclarationType = TypeInterface.new

  def fullDeclaration(objectType)
    @helper.fill_type(objectType)

    output = "package #{objectType.synthax_type.package.android}\n"

    output += @kotlinHelper.resolveImports(objectType)
    output += @kotlinHelper.resolveDocumentation(objectType)
    output += resolveObjectType(objectType)

    output
  end

  def resolveObjectType(objectType)
    output = ""

    if @helper.inheritFrom_widget(objectType)
      output += initCommonClass(objectType)
    else
      if @helper.is_enum(objectType)
        output += @kotlinHelper.initEnum(objectType)
      else
        if @helper.is_interface(objectType) or @helper.is_abstract(objectType)
          output += @kotlinHelper.initInterfaceOrAbstract(objectType)
        else
          output += initDataClass(objectType)
        end
      end
    end

    output = handleInnerTypes(objectType.synthax_type.sameFileTypes, output)

    output
  end

  def handleTypeName(objectType, variable, shouldAddComma = false)
    if variable.instance_of? Dictionary
      output = @kotlinHelper.dictionary_variable_declaration(variable)
    else
      output = @kotlinHelper.single_variable_declaration(variable)
    end

    output = variable.isBindable ? "Bind<#{output}>" : output
    output = variable.class == List ? "List<#{output}>" : output
    output = variable.isOptional ? output + "?" : output
    output
  end

  def initDataClass(objectType)
    typeKind = "data class"
    
    output = "\n#{typeKind} #{objectType.synthax_type.name}"

    counter = 0 
    if objectType.synthax_type.variables.any?
      output += " ("
      for variable in objectType.synthax_type.variables
        output += "\n#{@tab}#{@kotlinHelper.handleFieldAccessor(variable)}#{@kotlinHelper.handleFieldMutable(variable)}#{variable.name}: #{@kotlinHelper.handleTypeNameAndDefault(objectType, variable, objectType.synthax_type.variables.size - 1 != counter)}"
        counter += 1
      end
    end

    for inherited in objectType.synthax_type.inheritFrom
      if @helper.is_interface(inherited) && @helper.has_variables(inherited)
        if objectType.synthax_type.variables.size == 0
            output += " ("
        else
          output += ","
        end
        counter = 0 
        for variable in inherited.synthax_type.variables
          output += "\n#{@tab}#{@kotlinHelper.handleFieldAccessor(variable)}override #{@kotlinHelper.handleFieldMutable(variable)}#{variable.name}: #{@kotlinHelper.handleTypeNameAndDefault(objectType, variable, inherited.synthax_type.variables.size - 1 != counter)}"
          counter += 1
        end
      end
    end
    
    output += @kotlinHelper.getSuperClasses(objectType)

    output
  end

  def initCommonClass(objectType)
    typeKind = @helper.fetch_built_in_type_declaration(objectType.synthax_type.type)

    output = "\n#{typeKind} #{objectType.synthax_type.name}"
    
    counter = 0 
    if objectType.synthax_type.variables.any?
      output += " {"
      for variable in objectType.synthax_type.variables 
        output += "\n#{@tab}#{@kotlinHelper.handleFieldAccessor(variable)} #{@kotlinHelper.handleFieldMutable(variable)}#{variable.name}: #{handleTypeName(objectType, variable, objectType.synthax_type.variables.size - 1 != counter)}"
      end
    end

    for inherited in objectType.synthax_type.inheritFrom
      if @helper.is_interface(inherited) && @helper.has_variables(inherited)
        if !output.include? "{"
            output += " {"
        end
        counter = 0 
        for variable in inherited.synthax_type.variables
          output += "\n#{@tab}#{@kotlinHelper.handleFieldAccessor(variable)} #{@kotlinHelper.handleFieldMutable(variable)}#{variable.name}: #{handleTypeName(objectType, variable, inherited.synthax_type.variables.size - 1 != counter)}"
          counter += 1
        end
      end
    end

    if output.include? "{"
      output += "\n}"
    end

    output
  end

  def handleInnerTypes(objectTypes, input)
    output = input
    for objectType in objectTypes
      output += "\n#{@kotlinHelper.resolveDocumentation(objectType)}"
      output += "\n#{resolveObjectType(objectType)}"
      possibleNestedTypes = objectType.synthax_type.sameFileTypes
      if possibleNestedTypes.size > 0
        handleInnerTypes(objectType.synthax_type.sameFileTypes, output)
      end
    end
    output
  end

-%>
<%=
fullDeclaration(objectType) 
%>