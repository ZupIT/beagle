// THIS IS A GENERATED FILE. DO NOT EDIT THIS
/*
 * Copyright 2020 ZUP IT SERVICOS EM TECNOLOGIA E INOVACAO SA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
<%

  @helper.languageIdentifier = SupportedLanguages.new.kotlinBackend
  @helper.defaultDeclarationType = TypeDataClass.new

  def full_declaration(objectType)
    output = "package #{objectType.synthax_type.package.backend}\n"

    output += @kotlinHelper.resolve_imports(objectType)
    output += @kotlinHelper.resolve_documentation(objectType)
    output += resolve_object(objectType)

    output
  end

  def resolve_object(objectType)
    output = ""
    output += @kotlinHelper.resolve_kotlin_object(objectType)
    output += handle_inner_types(objectType.synthax_type.sameFileTypes)

    output
  end

  def handle_inner_types(objectTypes)
    output = ""
    for objectType in objectTypes
      output += "\n\n#{@kotlinHelper.resolve_documentation(objectType)}"
      output += "#{resolve_object(objectType)}"
      possibleNestedTypes = objectType.synthax_type.sameFileTypes
      if possibleNestedTypes.size > 0
        handle_inner_types(objectType.synthax_type.sameFileTypes, output)
      end
    end
    output
  end

-%>
<%=
full_declaration(objectType) 
%>