// THIS IS A GENERATED FILE. DO NOT EDIT THIS
/*
 * Copyright 2020 ZUP IT SERVICOS EM TECNOLOGIA E INOVACAO SA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
<%
  require_relative 'Templates/template_helper.rb'
  require_relative 'Templates/kotlin_template_helper.rb'

  @tab = "    "
  @template_helper = TemplateHelper.new
  @template_helper.languageIdentifier = SupportedLanguages.new.kotlin
  @template_helper.defaultDeclarationType = "data class"

  def fullDeclaration(objectType)
    output = "package #{objectType.synthax_type.package}\n"

    output += resolveImports(objectType)
    output += @kotlinHelper.resolveDocumentation(objectType, @template_helper)
    output += resolveObject(objectType)
    output
  end

  def resolveImports(objectType)
    output = ""
    for qualifiedName in @kotlinHelper.resolve_imports(objectType.synthax_type.variables, "")
      if !qualifiedName.include? "#{objectType.synthax_type.package}"
        output += "\nimport #{qualifiedName}"
      end
    end

    for inherited in objectType.synthax_type.inheritFrom
      if !inherited.synthax_type.package.include? "#{objectType.synthax_type.package}"
        output += "\nimport #{inherited.synthax_type.package}.#{inherited.synthax_type.name}"
      end
      
      for qualifiedName in @kotlinHelper.resolve_imports(inherited.synthax_type.variables, "")
        if !qualifiedName.include? "#{objectType.synthax_type.package}"
          output += "\nimport #{qualifiedName}"
        end
      end
    end

    output += resolveBindImport(objectType)

    if output.include? "import"
      output += "\n"
    end

    output
  end

  #TODO remove bind import rules
  def resolveBindImport(objectType)
    output = ""

    if objectType.synthax_type.variables.any? { |variable| variable.isBindable }
      if !"br.com.zup.beagle.widget.context".include? "#{objectType.synthax_type.package}"
        output += "\nimport br.com.zup.beagle.widget.context.Bind"
      end
    end

    if objectType.synthax_type.variables.any? { |variable| variable.isBindable && !variable.isOptional } and objectType.synthax_type.variables.any? { |v| v.isOptional == false}
      if !"br.com.zup.beagle.widget.context".include? "#{objectType.synthax_type.package}"
        output += "\nimport br.com.zup.beagle.widget.context.valueOf"
      end
    end

    if objectType.synthax_type.variables.any? { |variable| variable.isBindable && variable.isOptional } and objectType.synthax_type.variables.any? { |v| v.isOptional == false}
      if !"br.com.zup.beagle.widget.context".include? "#{objectType.synthax_type.package}"
        output += "\nimport br.com.zup.beagle.widget.context.valueOfNullable"
      end
    end

    output
  end

  def resolveObject(objectType)
    output = ""
    
    if @template_helper.is_enum(objectType)
      output += initEnum(objectType)
    else 
      if @template_helper.is_interface(objectType) or @template_helper.is_abstract(objectType)
        output += initInterfaceOrAbstract(objectType)
      else
        output += initCommonClass(objectType)
      end
    end

    output = handleInnerTypes(objectType.synthax_type.sameFileTypes, output)

    output
  end

  def initEnum(objectType)
    typeKind = @template_helper.fetch_built_in_type_declaration(objectType.synthax_type.type)

    output = "\n#{typeKind} #{objectType.synthax_type.name} {\n"

    counter = 0
    for field in objectType.synthax_type.variables
      if field.comment != nil
        output += "#{@tab}/**\n#{@tab} * #{@kotlinHelper.replace_breakLine_documentation(field.comment, "\n#{@tab} * ")}\n#{@tab} */\n"
      end
      output += "#{@tab}#{field.name}"
      if counter != objectType.synthax_type.variables.size - 1
        output += ",\n\n"
      end
      counter += 1
    end

    output += "\n}"
    output
  end

  def initInterfaceOrAbstract(objectType)
    typeKind = @template_helper.fetch_built_in_type_declaration(objectType.synthax_type.type)
    
    output = "\n#{typeKind} #{objectType.synthax_type.name}"
    output += getSuperClasses(objectType)

    counter = 0 
    if objectType.synthax_type.variables.any?
      output += " {"
      for variable in objectType.synthax_type.variables
        output += "\n#{@tab}#{@kotlinHelper.handleFieldAccessor(variable)}#{@kotlinHelper.handleFieldMutable(variable)}#{variable.name}: #{handleTypeNameAndDefault(objectType, variable, objectType.synthax_type.variables.size - 1 != counter)}"
        counter += 1
      end
    end

    for inherited in objectType.synthax_type.inheritFrom
      if @template_helper.is_interface(inherited)
        for variable in inherited.synthax_type.variables
          if !output.include? "{"
            output += "{"
          end
          output += "\n#{@tab}#{@kotlinHelper.handleFieldAccessor(variable)}override #{@kotlinHelper.handleFieldMutable(variable)}#{variable.name}: #{handleTypeNameAndDefault(objectType, variable, inherited.synthax_type.variables.size - 1 != counter && !@template_helper.is_abstract(objectType))}"
          counter += 1
        end
      end
    end

    if output.include? "val" or output.include? "var"
      output += "\n}"
    end
    
    output
  end

  def initCommonClass(objectType)
    typeKind = @template_helper.fetch_built_in_type_declaration(objectType.synthax_type.type)
    
    output = "\n#{typeKind} #{objectType.synthax_type.name}"

    counter = 0 
    if objectType.synthax_type.variables.any?
      output += " ("
      for variable in objectType.synthax_type.variables
        output += "\n#{@tab}#{@kotlinHelper.handleFieldAccessor(variable)}#{@kotlinHelper.handleFieldMutable(variable)}#{variable.name}: #{handleTypeNameAndDefault(objectType, variable, objectType.synthax_type.variables.size - 1 != counter)}"
        counter += 1
      end
    end

    for inherited in objectType.synthax_type.inheritFrom
      if @template_helper.is_interface(inherited) && @template_helper.has_variables(inherited)
        if objectType.synthax_type.variables.size == 0
            output += " ("
        else
          output += ","
        end
        counter = 0 
        for variable in inherited.synthax_type.variables
          output += "\n#{@tab}#{@kotlinHelper.handleFieldAccessor(variable)}override #{@kotlinHelper.handleFieldMutable(variable)}#{variable.name}: #{handleTypeNameAndDefault(objectType, variable, inherited.synthax_type.variables.size - 1 != counter)}"
          counter += 1
        end
      end
    end
    
    output += getSuperClasses(objectType)

    if objectType.synthax_type.variables.any?(&:isBindable) and objectType.synthax_type.variables.any? { |v| v.isOptional == false}
      output += "{\n#{@tab}constructor ("
      counter = 0 
      for variable in objectType.synthax_type.variables
        output += "\n#{@tab}#{@tab}#{variable.name}: #{handleTypeNameForInitMethod(variable, objectType.synthax_type.variables.size - 1 != counter)}"
        counter += 1
      end
      for inherited in objectType.synthax_type.inheritFrom
        if @template_helper.is_interface(inherited) && @template_helper.has_variables(inherited)
          if @template_helper.has_variables(objectType)
            output += ","
          else
            output += " ("
          end
          counter = 0 
          for variable in inherited.synthax_type.variables
          output += "\n#{@tab}#{@tab}#{variable.name}: #{handleTypeNameForInitMethod(variable, inherited.synthax_type.variables.size - 1 != counter)}"
          counter += 1
          end
        end
      end
      output += "\n#{@tab}) : this ("

      counter = 0
      for variable in objectType.synthax_type.variables
        output += "\n#{@tab}#{@tab}#{handleVariableAssignementInsideConstructor(variable, objectType.synthax_type.variables.size - 1 != counter)}"
        counter += 1
      end

      for inherited in objectType.synthax_type.inheritFrom
        if @template_helper.is_interface(inherited) && @template_helper.has_variables(inherited)
          if @template_helper.has_variables(objectType)
              output += ","
          else
            output += " ("
          end
          counter = 0
          for variable in inherited.synthax_type.variables
          output += "\n#{@tab}#{@tab}#{handleVariableAssignementInsideConstructor(variable, inherited.synthax_type.variables.size - 1 != counter)}"
          counter += 1
          end
        end
      end
      output += "\n#{@tab})\n}"
    end

    output
  end

  def handleInnerTypes(objectTypes, input)
    output = input
    for objectType in objectTypes
      output += "\n#{@kotlinHelper.resolveDocumentation(objectType, @template_helper)}"
      output += "\n#{resolveObject(objectType)}"
      possibleNestedTypes = objectType.synthax_type.sameFileTypes
      if possibleNestedTypes.size > 0
        handleInnerTypes(objectType.synthax_type.sameFileTypes, output)
      end
    end
    output
  end

  def getSuperClasses(objectType)
    output = ""
    if objectType.synthax_type.inheritFrom.size > 0
      if @template_helper.is_interface(objectType) or @template_helper.is_abstract(objectType)
        output += " : "
      else
        output += "\n) : "
      end

      counter = 0 
      for inherited in objectType.synthax_type.inheritFrom
        output += @template_helper.is_abstract(inherited) ? "#{inherited.name}()" : inherited.name
        if objectType.synthax_type.inheritFrom.size - 1 != counter 
          output += ", "
        end
        counter += 1
      end
      output += " "
    else
      if !@template_helper.is_interface(objectType)
        output += "\n)"
      end
    end

    output
  end

  def single_variable_declaration(variable, import_manager)
    type_name = @template_helper.fetch_type(variable.typeName.name)
    type_name = @kotlinHelper.adapt_type_name_to_kotlin_specific(type_name)
    type_name
  end

  def handleTypeNameAndDefault(objectType, variable, shouldAddComma = false)
    if variable.instance_of? Dictionary
      output = @kotlinHelper.dictionary_variable_declaration(variable)
    else
      output = single_variable_declaration(variable, @kotlinHelper.import_manager)
    end

    default = getVariableDefault(variable)
    output = variable.isBindable ? "Bind<#{output}>" : output
    output = variable.class == List ? "List<#{output}>" : output
    output = variable.isOptional ? output + "?" : output
    output = !default.empty? && !@template_helper.is_interface(objectType) ? "#{output} = #{default}" : output
    output = shouldAddComma ? output + "," : output
    output
  end

  def handleTypeNameForInitMethod(variable, shouldAddComma = false)
    default = getVariableDefault(variable)
    if variable.instance_of? Dictionary
      output = @kotlinHelper.dictionary_variable_declaration(variable)
    else
      output = single_variable_declaration(variable, @kotlinHelper.import_manager)
    end
    output = variable.class == List ? "List<#{output}>" : output
    output = variable.isOptional ? output + "?" : output
    output = !default.empty? ? "#{output} = #{default}" : output
    output = shouldAddComma ?  output + "," : output
    output
  end

  def handleVariableAssignementInsideConstructor(variable, shouldAddComma = false)
    bind_helper = variable.isOptional ? "valueOfNullable" : "valueOf"
    output = variable.isBindable ? "#{bind_helper}(#{variable.name})" : variable.name
    output = shouldAddComma ? output + "," : output
    output
  end

  def getVariableDefault(variable)
    variable.defaultValue.empty? && variable.isOptional ? "null" : variable.defaultValue
  end

-%>
<%=
fullDeclaration(objectType) 
%>