// THIS IS A GENERATED FILE. DO NOT EDIT THIS
/*
 * Copyright 2020 ZUP IT SERVICOS EM TECNOLOGIA E INOVACAO SA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
<%
  require_relative 'Templates/template_helper.rb'
  require_relative 'Templates/kotlin_template_helper.rb'

  @tab = "    "
  @template_helper = TemplateHelper.new
  @template_helper.languageIdentifier = SupportedLanguages.new.kotlin
  @template_helper.defaultDeclarationType = TypeInterface.new.synthax_type.name

  def single_variable_declaration(variable, import_manager)
    # TODO validate
    type_name = @template_helper.fetch_type(variable.type.name)
    if @template_helper.is_server_driven_component(variable.type)
      type_name + "Schema"
    end
    # type_name = variable.type.synthax_type.is_a?(EnumType) or @template_helper.is_server_driven_component(variable.type) ? type_name + "Schema"  : type_name
    type_name = @kotlinHelper.adapt_type_name_to_kotlin_specific(type_name)
    type_name
  end

  def variable_type_declaration(variable, import_manager)
    output = ""
    if variable.instance_of? Dictionary
      output = @kotlinHelper.dictionary_variable_declaration(variable)
    else
      output = single_variable_declaration(variable, @kotlinHelper.import_manager)
    end
    
    output = variable.isBindable ? "Bind<#{output}>" : output
    output = variable.class == List ? "List<#{output}>" : output
    output = variable.isOptional ? output + "?" : output
    output
  end

  def fullDeclaration(objectType)
    output = "package br.com.zup.beagle.generated.#{objectType.synthax_type.package.gsub("br.com.zup.beagle.", "")}\n"

    output += resolveImports(objectType)
    output += @kotlinHelper.resolveDocumentation(objectType)
    output += resolveObjectType(objectType)

    output
  end

  def resolveImports(objectType)
    output = ""

    for variable in objectType.synthax_type.variables
      if !@template_helper.variable_is_primitive(variable)
        qualifiedName = "#{variable.type.synthax_type.package}.#{variable.type.synthax_type.name}"
        if @template_helper.is_server_driven_component(variable.type)
          qualifiedName += "Schema"
        end
        if !output.include? "#{qualifiedName}\n" and !qualifiedName.include? "#{objectType.synthax_type.package}"
          output += "import #{qualifiedName}\n"
        end
      end
    end

    if !@template_helper.is_server_driven_component(objectType)
      for inherited in objectType.synthax_type.inheritFrom
        if !inherited.synthax_type.package.include? "#{objectType.synthax_type.package}"
          output += "import #{inherited.synthax_type.package}.#{inherited.synthax_type.name}\n"
          if @template_helper.is_server_driven_component(inherited)
            output += "Schema"
          end
        end
        
        for variable in inherited.synthax_type.variables
          if !@template_helper.variable_is_primitive(variable)
              qualifiedName = "#{variable.type.synthax_type.package}.#{variable.type.synthax_type.name}"
            if !output.include? "#{qualifiedName}\n" and !qualifiedName.include? "#{objectType.synthax_type.package}"
              output += "import #{qualifiedName}\n"
              if @template_helper.is_server_driven_component(inherited)
                output += "Schema"
              end
            end
          end
        end 
      end
    end

    output = output.gsub('br.com.zup.beagle.', 'br.com.zup.beagle.generated.')

    output += resolveBindImport(objectType)

    if output.include? "import"
      "\n" + output + "\n"
    else
      output + "\n"
    end
  end

  #TODO remove bind import rules
  def resolveBindImport(objectType)
    output = ""

    if objectType.synthax_type.variables.any? { |variable| variable.isBindable }
      if !"br.com.zup.beagle.android.context".include? "#{objectType.synthax_type.package}"
        output += "import br.com.zup.beagle.android.context.Bind\n"
      end
    end

    if output.include? "import"
      "\n" + output
    else
      output
    end
  end

  def resolveObjectType(objectType)
    output = ""
    isEnumDeclaration = @template_helper.is_enum(objectType)

    if isEnumDeclaration
      output += initForEnum(objectType)
    else
      output += initForCommonObject(objectType)
    end
    output += "\n}"

    output = handleInnerTypes(objectType.synthax_type.sameFileTypes, output)

    output
  end

  def initForEnum(objectType)
    typeKind = @template_helper.fetch_built_in_type_declaration(objectType.synthax_type.type)

    output = "\n#{typeKind} #{objectType.synthax_type.name} {\n"
    output += "#{@tab}"
    output += objectType.synthax_type.variables.map { |enumCase| enumCase.name.upcase }.join(",\n#{@tab}")
    output
  end

  def initForCommonObject(objectType)
    typeKind = @template_helper.fetch_built_in_type_declaration(objectType.synthax_type.type)

    output = "\n#{typeKind} #{objectType.synthax_type.name}"
    if @template_helper.is_server_driven_component(objectType)
      output += "Schema" 
    end
    output += " {"
    for variable in objectType.synthax_type.variables 
      output += "\n#{@tab}#{@kotlinHelper.handleFieldAccessor(variable)} val #{variable.name}: #{variable_type_declaration(variable, @kotlinHelper.import_manager)}"
    end
    output
  end

  def handleInnerTypes(objectTypes, input)
    output = input
    for objectType in objectTypes
      output += "\n#{@kotlinHelper.resolveDocumentation(objectType)}"
      output += "\n#{resolveObjectType(objectType)}"
      possibleNestedTypes = objectType.synthax_type.sameFileTypes
      if possibleNestedTypes.size > 0
        handleInnerTypes(objectType.synthax_type.sameFileTypes, output)
      end
    end
    output
  end

-%>
<%=
fullDeclaration(objectType) 
%>